# The encrypted password database. Must be owned by the user, and mode 0600.
db_path: /home/plalonde/prog/secrets/secrets.json.gpg

# Before saving, move the previous database to this location.
backup_db_path: /home/plalonde/prog/secrets/secrets.json.gpg~

# Save the database each time a change (add, change, delete) is made.
autosave: yes

# After this timeout, the database will be automatically saved and the program
# will exit. This should be set to a value lower than the TTL of any agent
# retaining secret keys, such as gpg-agent.
timeout: 300

# Encryption/signing command. The command has to support reading plaintext
# from STDIN and has to support output to a specific file. The output file
# will be supplied by the program, where the '%db' token appears.
# It is recommended, for security, that the command also signs the database
# to ensure we are not dealing with a fake.
encrypt_cmd: /usr/bin/gpg --yes -se -r E88745AD520A18E413DEF177490D6CABAB7D272D -o %db -

# Decryption command. The command must write the decrypted output to STDOUT.
# The file to decrypt will be passed by the program, where the '%db' token
# appears. It is recommended that the decryption command also verifies
# signatures on the database to ensure we are not dealing with a fake.
decrypt_cmd: /usr/bin/gpg --decrypt %db

# Command to paste secrets to the clipboard. The command has to read the
# secret from STDIN. Ideally, it should not keep the secret forever.
paste_cmd: /usr/bin/xclip -quiet

# If set to 'no', the program will not use mlock() to ensure allocated
# memory always remains in RAM. This is insecure if the system isn't
# encrypting its swap memory.
mlock: yes

# The maximum length of fields for the secrets database. Increase it if
# you plan on saving long values, notes, secrets, etc.
max_value_length: 1024

